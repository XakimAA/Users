{"version":3,"sources":["axios.js","Service.js","pages/UserCard/usercard.jsx","pages/UserList/userlist.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","baseURL","Service","page","size","offset","get","user","post","userID","put","user_id","date_from","date_to","transaction","service","columns","id","name","fieldGetter","UserCard","props","useParams","useState","user_name","user_custom","email","register_date","balance","wallet_amount","wallet_currency","enabled","values","setValues","amount","comment","transactionInfo","setTransactionInfo","errorFields","setErrorFields","loadSave","setLoadSave","loadingPage","setloadingPage","userNotFound","setUserNotFound","transactions","setTransactions","addTransactionLoad","setAddTransactionLoad","errorText","setErrorText","useEffect","getUserInfo","then","data","getTransactions","Promise","all","http_status_code","handlerOnChange","inputID","event","target","value","handlerOnChangeTransaction","style","padding","color","fullscreen","centered","Paper","marginBottom","Typography","component","align","Grid","container","spacing","item","xs","md","FormControl","fullWidth","TextField","label","variant","error","onChange","disabled","moment","format","type","appearance","onClick","updateUser","answer","statusText","status","extended_message","global_errors","length","reduce","str","current","property_errors","Object","keys","console","log","catch","fetching","isOpened","staticElements","collapsedLabel","expandedLabel","onSubmit","preventDefault","addTransaction","message","required","height","rows","compact","className","tableClassName","renderEmptyMessage","renderRow","row","key","operation_id","map","column","index","CellComponent","rowIndex","columnIndex","UserList","history","useHistory","users","setUsers","recordsTotal","setRecordsTotal","currentPage","setCurrentPage","perPage","userParams","setUserParams","loadAdd","setLoadAdd","getUsers","items","handlerTableClick","param","push","addUser","Math","floor","paddingLeft","total","onChangePage","title","onDoubleClick","bind","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8cAEAA,IAAMC,SAASC,QAAU,gDAEVF,QAAf,ECHaG,EAAb,iGACWC,EAAMC,GACb,IAAMC,GAAUF,EAAO,GAAKC,EAC5B,OAAOL,EAAMO,IAAN,UAAaP,EAAMC,SAASC,QAA5B,yBAAoDI,EAApD,kBAAoED,MAH/E,8BAMUG,GACN,OAAOR,EAAMS,KAAN,UAAcT,EAAMC,SAASC,QAA7B,UAA8CM,KAPzD,kCAUcE,GACV,OAAOV,EAAMO,IAAN,UAAaP,EAAMC,SAASC,QAA5B,kBAA6CQ,MAXxD,iCAcaF,GACT,OAAOR,EAAMW,IAAN,UAAaX,EAAMC,SAASC,QAA5B,kBAA6CM,EAAKI,SAAWJ,KAfxE,sCAmBIE,GAGC,IAFDG,EAEA,uDAFY,2BACZC,EACA,uDADU,2BAEV,OAAOd,EAAMO,IAAN,UACFP,EAAMC,SAASC,QADb,kBAC8BQ,EAD9B,uCACmEG,EADnE,wBAC4FC,MAxBvG,qCA4BiBC,GACb,OAAOf,EAAMS,KAAN,UACFT,EAAMC,SAASC,QADb,kBAC8Ba,EAAYH,QAD1C,aAELG,OA/BN,KCMMC,EAAU,IAAIb,EAEdc,EAAU,CACd,CAAEC,GAAI,OAAQC,KAAM,2BAAQC,YAAa,QACzC,CAAEF,GAAI,mBAAoBC,KAAM,kFAAkBC,YAAa,oBAC/D,CAAEF,GAAI,SAAUC,KAAM,kFAAkBC,YAAa,UACrD,CAAEF,GAAI,eAAgBC,KAAM,uCAAUC,YAAa,gBACnD,CAAEF,GAAI,WAAYC,KAAM,uCAAUC,YAAa,YAC/C,CAAEF,GAAI,UAAWC,KAAM,qEAAeC,YAAa,WACnD,CAAEF,GAAI,SAAUC,KAAM,uCAAUC,YAAa,WAwVhCC,EArVE,SAACC,GAAW,IACrBJ,EAAOK,cAAPL,GADoB,EAEEM,mBAAS,CACnCZ,QAAS,GACTa,UAAW,GACXC,YAAa,GACbC,MAAO,GACPC,cAAe,GACfC,QAAS,GACTC,cAAe,GACfC,gBAAiB,GACjBC,SAAS,IAXe,mBAEnBC,EAFmB,KAEXC,EAFW,OAcoBV,mBAAS,CACrDZ,QAASM,EACTiB,OAAQ,GACRC,QAAS,KAjBe,mBAcnBC,EAdmB,KAcFC,EAdE,OAoBYd,mBAAS,CAC7CZ,SAAS,EACTa,WAAW,EACXC,aAAa,EACbC,OAAO,IAxBiB,mBAoBnBY,EApBmB,KAoBNC,EApBM,OA2BMhB,oBAAS,GA3Bf,mBA2BnBiB,EA3BmB,KA2BTC,EA3BS,OA4BYlB,oBAAS,GA5BrB,mBA4BnBmB,EA5BmB,KA4BNC,EA5BM,OA6BcpB,oBAAS,GA7BvB,mBA6BnBqB,EA7BmB,KA6BLC,EA7BK,OA8BctB,mBAAS,IA9BvB,mBA8BnBuB,EA9BmB,KA8BLC,EA9BK,OA+B0BxB,oBAAS,GA/BnC,mBA+BnByB,EA/BmB,KA+BCC,EA/BD,OAgCQ1B,mBAAS,IAhCjB,mBAgCnB2B,EAhCmB,KAgCRC,EAhCQ,KAkC1BC,qBAAU,WACR,IAAMC,EAActC,EAAQsC,YAAYpC,GAAIqC,MAAK,SAAC/C,GAEhD,OADA0B,EAAU1B,EAAKgD,MACRhD,KAEHiD,EAAkBzC,EAAQyC,gBAAgBvC,GAAIqC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAE1D,OADAR,EAAgBQ,GACTA,KAETE,QAAQC,IAAI,CAACL,EAAaG,IAAkBF,MAAK,SAACtB,GAChDa,EAAoD,MAApCb,EAAO,GAAGuB,KAAKI,kBAC/BhB,GAAe,QAEhB,IAEH,IAAMiB,EAAkB,SAACC,GAAD,OAAa,SAACC,GACpC7B,EAAU,eAAKD,EAAN,eAAe6B,EAAUC,EAAMC,OAAOC,SAC/CzB,EAAe,eAAKD,EAAN,eAAoBuB,GAAU,OAkDxCI,GAA6B,SAACJ,GAAD,OAAa,SAACC,GAC/CzB,EAAmB,eAAKD,EAAN,eAAwByB,EAAUC,EAAMC,OAAOC,WA8BnE,OACE,yBAAKE,MAAO,CAAEC,QAAS,SACpBzB,GAAe,kBAAC,SAAD,CAAQ0B,MAAM,OAAOC,YAAY,EAAMC,UAAU,KAC/D5B,GAAeE,GAAgB,6NAC/BF,IAAgBE,GAChB,oCACE,kBAAC2B,EAAA,EAAD,CAAOL,MAAO,CAAEC,QAAS,OAAQK,aAAc,SAC7C,kBAACC,EAAA,EAAD,CAAYC,UAAU,IAAIC,MAAM,OAAOT,MAAO,CAAEM,aAAc,SAA9D,gJAGA,kBAACI,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,UACHoE,MAAM,KACNC,QAAQ,WACRC,MAAOjD,EAAY3B,QACnB6E,SAAU5B,EAAgB,WAC1BI,MAAOhC,EAAOrB,QACd8E,UAAQ,MAId,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,YACHoE,MAAM,8FACNC,QAAQ,WACRC,MAAOjD,EAAYd,UACnBgE,SAAU5B,EAAgB,aAC1BI,MAAOhC,EAAOR,cAIpB,kBAACoD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,cACHoE,MAAM,0DACNC,QAAQ,WACRC,MAAOjD,EAAYb,YACnB+D,SAAU5B,EAAgB,eAC1BI,MAAOhC,EAAOP,gBAIpB,kBAACmD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,QACHoE,MAAM,SACNC,QAAQ,WACRC,MAAOjD,EAAYZ,MACnB8D,SAAU5B,EAAgB,SAC1BI,MAAOhC,EAAON,UAIpB,kBAACkD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,gBACHoE,MAAM,8FACNC,QAAQ,WACRtB,MAAO0B,IAAO1D,EAAOL,eAAegE,OAAO,cAC3CF,UAAQ,MAId,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,UACHoE,MAAM,uCACNC,QAAQ,WACRtB,MAAOhC,EAAOJ,QACd6D,UAAQ,MAId,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,gBACHoE,MAAM,6CACNC,QAAQ,WACRtB,MAAOhC,EAAOH,cACd4D,UAAQ,MAId,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,kBACHoE,MAAM,uCACNC,QAAQ,WACRtB,MAAOhC,EAAOF,gBACd2D,UAAQ,MAId,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACV,EAAA,EAAD,CAAYC,UAAU,IAAIC,MAAM,OAAOT,MAAO,CAAEE,MAAO,YACpDlB,KAIP,kBAAC0B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGN,MAAM,SAC9B,kBAAC,SAAD,CACEiB,KAAK,SACLC,WAAW,YACXC,QAjMW,SAAChC,GAC1BX,EAAa,IACbV,GAAY,GACZ1B,EACGgF,WAAW/D,GACXsB,MAAK,SAAC0C,GAEL,GADAvD,GAAY,GACc,OAAtBuD,EAAOC,YAAyC,MAAlBD,EAAOE,OAAgB,CACvD,IAAIX,EAAQ,GAERS,EAAOzC,MACPyC,EAAOzC,KAAK4C,kBACZH,EAAOzC,KAAK4C,iBAAiBC,eAC/BJ,EAAOzC,KAAK4C,iBAAiBC,cAAcC,OAAS,IAEpDd,EAAQS,EAAOzC,KAAK4C,iBAAiBC,cAAcE,QACjD,SAACC,EAAKC,GAAN,OAAkBD,EAAM,IAAMC,IAC9B,IAIAR,EAAOzC,MACPyC,EAAOzC,KAAK4C,kBACZH,EAAOzC,KAAK4C,iBAAiBM,kBAE/BlB,GACE,8HACAmB,OAAOC,KAAKX,EAAOzC,KAAK4C,iBAAiBM,iBAAiBH,QAAO,SAACC,EAAKC,GAErE,OADAjE,EAAe,eAAKD,EAAN,eAAoBkE,GAAU,KACrCD,EAAM,IAAMC,EAAU,OAC5B,KAEO,KAAVjB,EAAcqB,QAAQC,IAAI,qDAE5B1D,EAAaoC,GACbqB,QAAQC,IAAI,uCAAUtB,SAGxBqB,QAAQC,IAAI,uCAAUb,MAGzBc,OAAM,SAACvD,GACNd,GAAY,GACZmE,QAAQC,IAAI,8FAAoBtD,OAuJtBwD,SAAUvE,GAJZ,uDAWN,kBAAC+B,EAAA,EAAD,CAAOL,MAAO,CAAEC,QAAS,OAAQK,aAAc,SAC7C,kBAAC,WAAD,CACEwC,UAAU,EACVC,eAAgB,EAChBC,eAAgB,8FAChBC,cAAe,iBAAM,qDAErB,kBAAC1C,EAAA,EAAD,CAAYC,UAAU,IAAIC,MAAM,OAAOT,MAAO,CAAEM,aAAc,SAA9D,qGAGA,0BAAM4C,SAhKW,SAACtD,GAC5BA,EAAMuD,iBACNpE,GAAsB,GACtBlC,EACGuG,eAAelF,GACfkB,MAAK,SAAC0C,GACL/C,GAAsB,GAElB+C,EAAOzC,OACRyC,EAAOzC,KAAKgE,SACS,OAAtBvB,EAAOC,YACW,MAAlBD,EAAOE,QAEPU,QAAQC,IAAI,oDACZ9F,EAAQyC,gBAAgBvC,GAAIqC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAClCR,EAAgBQ,OAGlBqD,QAAQC,IAAI,uCAAUb,MAGzBc,OAAM,SAACvD,GACNN,GAAsB,GACtB2D,QAAQC,IAAI,8FAAoBtD,QA0I1B,kBAACqB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,SACHoE,MAAM,iCACNC,QAAQ,WACRE,SAAUvB,GAA2B,UACrCD,MAAO5B,EAAgBF,OACvB0D,KAAK,SACL4B,UAAQ,MAId,kBAAC5C,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,UACHoE,MAAM,qEACNC,QAAQ,WACRE,SAAUvB,GAA2B,WACrCD,MAAO5B,EAAgBD,QACvBqF,UAAQ,MAId,kBAAC5C,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGN,MAAM,SAC9B,kBAAC,SAAD,CACEiB,KAAK,SACLC,WAAW,YACXkB,SAAU/D,EACVkB,MAAO,CAAEuD,OAAQ,SAJnB,yDAaR,kBAAClD,EAAA,EAAD,CAAOL,MAAO,CAAEM,aAAc,SAC5B,kBAACC,EAAA,EAAD,CAAYC,UAAU,IAAIC,MAAM,OAAOT,MAAO,CAAEC,QAAS,SAAzD,gJAGA,kBAAC,QAAD,CACEnD,QAASA,EACT0G,KAAM5E,EACN6E,SAAS,EACTC,UAAU,gBACVC,eAAe,aACfC,mBAAoB,kBAAM,yFAC1BC,UAAW,SAACxE,GAEV,OADAA,EAAKyE,IAAL,KAAmBtC,IAAOnC,EAAKyE,IAAL,MAAkBrC,OAAO,cAEjD,wBAAIiC,UAAWrE,EAAKqE,UAAWK,IAAK1E,EAAKyE,IAAIE,cAC1C3E,EAAKvC,QAAQmH,KAAI,SAACC,EAAQC,GAAT,OAChB,kBAAC9E,EAAK+E,cAAN,CACEL,IAAKI,EACLD,OAAQA,EACRJ,IAAKzE,EAAKyE,IACVO,SAAUhF,EAAKgF,SACfC,YAAaH,e,kBClV/BtH,G,OAAU,IAAIb,GAEdc,EAAU,CACd,CACEC,GAAI,UACJC,KAAM,KACNC,YAAa,WAEf,CACEF,GAAI,YACJC,KAAM,8FACNC,YAAa,aAEf,CACEF,GAAI,cACJC,KAAM,0DACNC,YAAa,eAEf,CACEF,GAAI,QACJC,KAAM,SACNC,YAAa,UA8NFsH,EA1NE,SAACpH,GAChB,IAAMqH,EAAUC,cADU,EAEApH,mBAAS,IAFT,mBAEnBqH,EAFmB,KAEZC,EAFY,OAGctH,mBAAS,GAHvB,mBAGnBuH,EAHmB,KAGLC,EAHK,OAIYxH,mBAAS,GAJrB,mBAInByH,EAJmB,KAINC,EAJM,OAKI1H,mBAAS,IALb,mBAKnB2H,EALmB,aAMU3H,mBAAS,KANnB,mBAMnB4H,EANmB,KAMPC,EANO,OAOI7H,oBAAS,GAPb,mBAOnB8H,EAPmB,KAOVC,EAPU,OAQQ/H,mBAAS,IARjB,mBAQnB2B,EARmB,KAQRC,EARQ,OAUY5B,mBAAS,CAC7CZ,SAAS,EACTa,WAAW,EACXC,aAAa,EACbC,OAAO,IAdiB,mBAUnBY,EAVmB,KAUNC,EAVM,KAiB1Ba,qBAAU,WACRrC,EAAQwI,SAASP,EAAaE,GAAS5F,MAAK,SAACkG,GAI3C,OAHA5C,QAAQC,IAAI,WAAY2C,EAAMjG,KAAKA,MACnCsF,EAASW,EAAMjG,KAAKA,MACpBwF,EAAgBS,EAAMjG,KAAKuF,cACpB,kBAER,CAACE,IAEJ,IAAMpF,EAAkB,SAACC,GAAD,OAAa,SAACC,GACpCsF,EAAc,eAAKD,EAAN,eAAmBtF,EAAUC,EAAMC,OAAOC,SACvDzB,EAAe,eAAKD,EAAN,eAAoBuB,GAAU,OAuDxC4F,EAAoB,SAACC,GACzB9C,QAAQC,IAAI6C,GACZhB,EAAQiB,KAAR,oBAA0BD,KAG5B,OACE,yBAAKxF,MAAO,CAAEC,QAAS,SACrB,kBAACI,EAAA,EAAD,CAAOL,MAAO,CAAEC,QAAS,OAAQK,aAAc,SAC7C,kBAAC,WAAD,CACEwC,UAAU,EACVC,eAAgB,EAChBC,eAAgB,iBAAM,6EACtBC,cAAe,iBAAM,qDAErB,kBAAC1C,EAAA,EAAD,CAAYC,UAAU,IAAIC,MAAM,OAAOT,MAAO,CAAEM,aAAc,SAA9D,yIAGA,0BAAM4C,SArEa,SAACtD,GAC1BA,EAAMuD,iBACNlE,EAAa,IACbmG,GAAW,GACXvI,EACG6I,QAAQT,GACR7F,MAAK,SAAC0C,GACL,GAA0B,OAAtBA,EAAOC,YAAyC,MAAlBD,EAAOE,OAAgB,CACvD,IAAIX,EAAQ,GAERS,EAAOzC,MACPyC,EAAOzC,KAAK4C,kBACZH,EAAOzC,KAAK4C,iBAAiBC,eAC/BJ,EAAOzC,KAAK4C,iBAAiBC,cAAcC,OAAS,IAEpDd,EAAQS,EAAOzC,KAAK4C,iBAAiBC,cAAcE,QACjD,SAACC,EAAKC,GAAN,OAAkBD,EAAM,IAAMC,EAAU,OACxC,IAIAR,EAAOzC,MACPyC,EAAOzC,KAAK4C,kBACZH,EAAOzC,KAAK4C,iBAAiBM,kBAE/BlB,GACE,wCACAmB,OAAOC,KAAKX,EAAOzC,KAAK4C,iBAAiBM,iBAAiBH,QAAO,SAACC,EAAKC,GAGrE,OAFAjE,EAAe,eAAKD,EAAN,eAAoBkE,GAAU,KAC5CI,QAAQC,IAAIL,GACLD,EAAM,IAAMC,EAAU,IAAOR,EAAOzC,KAAK4C,iBAAiBM,gBAAgBD,GAAW,OAC3F,KAEDR,EAAOzC,MAAUyC,EAAOzC,KAAKgE,UAAShC,GAASS,EAAOzC,KAAKgE,SAEnD,KAAVhC,GACF0D,EAAeY,KAAKC,OAAOhB,EAAe,GAAKI,GAAW,GAC1DtC,QAAQC,IAAI,sDAEZ1D,EAAaoC,GACbqB,QAAQC,IAAI,uCAAUtB,SAGxBqB,QAAQC,IAAI,uCAAUb,GAExBsD,GAAW,MAEZxC,OAAM,WACLwC,GAAW,QAsBT,kBAAC1E,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,UACHoE,MAAM,KACNC,QAAQ,WACRC,MAAOjD,EAAY3B,QACnB6E,SAAU5B,EAAgB,WAC1B4D,UAAQ,MAId,kBAAC5C,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,YACHoE,MAAM,8FACNC,QAAQ,WACRC,MAAOjD,EAAYd,UACnBgE,SAAU5B,EAAgB,iBAIhC,kBAACgB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,cACHoE,MAAM,0DACNC,QAAQ,WACRC,MAAOjD,EAAYb,YACnB+D,SAAU5B,EAAgB,mBAIhC,kBAACgB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACC,EAAA,EAAD,CACEnE,GAAG,QACHoE,MAAM,SACNC,QAAQ,WACRC,MAAOjD,EAAYZ,MACnB8D,SAAU5B,EAAgB,aAI/BV,GACC,kBAAC0B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,kBAACC,EAAA,EAAD,CAAaC,WAAS,GACpB,kBAACV,EAAA,EAAD,CAAYC,UAAU,IAAIC,MAAM,OAAOT,MAAO,CAAEE,MAAO,YACpDlB,KAKT,kBAAC0B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGN,MAAM,SAC9B,kBAAC,SAAD,CACEiB,KAAK,SACLC,WAAW,YACX3B,MAAO,CAAEuD,OAAQ,QACjBV,SAAUsC,GAJZ,yDAcR,kBAAC9E,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAYC,UAAU,IAAIC,MAAM,OAAOT,MAAO,CAAEC,QAAS,SAAzD,+FAGA,kBAACS,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAId,MAAO,CAAEM,aAAc,OAAQuF,YAAa,SAC7D,kBAAC,IAAD,CACEvD,QAASwC,EACTgB,MAAOlB,EACPI,QAASA,EACTe,aAAchB,EACdrB,UAAU,QACVxH,KAAK,SAIX,kBAAC,QAAD,CACEY,QAASA,EACT0G,KAAMkB,EACNjB,SAAS,EACTC,UAAU,gBACVC,eAAe,aACfC,mBAAoB,kBAAM,yFAC1BC,UAAW,SAACxE,GAAD,OACT,wBACE2G,MAAM,8UACNtC,UAAWrE,EAAKqE,UAChBK,IAAK1E,EAAKyE,IAAIrH,QACdwJ,cAAeV,EAAkBW,KAAK,KAAM7G,EAAKyE,IAAIrH,UAEpD4C,EAAKvC,QAAQmH,KAAI,SAACC,EAAQC,GAAT,OAChB,kBAAC9E,EAAK+E,cAAN,CACEL,IAAKI,EACLD,OAAQA,EACRJ,IAAKzE,EAAKyE,IACVO,SAAUhF,EAAKgF,SACfC,YAAaH,cCnNhBgC,MAjBf,WACE,OACE,kBAAC,gBAAD,KACA,yBAAKzC,UAAU,OACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO0C,KAAK,iBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCTQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7H,MAAK,SAAA8H,GACJA,EAAaC,gBAEdvE,OAAM,SAAAvB,GACLqB,QAAQrB,MAAMA,EAAMgC,c","file":"static/js/main.4fe86baf.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\naxios.defaults.baseURL = \"https://livedemo.xsolla.com/fe/test-task/baev\";\r\n\r\nexport default axios;\r\n","import { default as axios } from './axios';\r\nexport class Service {\r\n  getUsers(page, size) {\r\n    const offset = (page - 1) * size;\r\n    return axios.get(`${axios.defaults.baseURL}/users?offset=${offset}&limit=${size}`);\r\n  }\r\n\r\n  addUser(user) {\r\n    return axios.post(`${axios.defaults.baseURL}/users`, user);\r\n  }\r\n\r\n  getUserInfo(userID) {\r\n    return axios.get(`${axios.defaults.baseURL}/users/${userID}`);\r\n  }\r\n\r\n  updateUser(user) {\r\n    return axios.put(`${axios.defaults.baseURL}/users/${user.user_id}`, user);\r\n  }\r\n\r\n  getTransactions(\r\n    userID,\r\n    date_from = '1970-12-28T15%3A00%3A00Z',\r\n    date_to = '2030-12-28T15%3A10%3A00Z'\r\n  ) {\r\n    return axios.get(\r\n      `${axios.defaults.baseURL}/users/${userID}/transactions?datetime_from=${date_from}&datetime_to=${date_to}`\r\n    );\r\n  }\r\n\r\n  addTransaction(transaction) {\r\n    return axios.post(\r\n      `${axios.defaults.baseURL}/users/${transaction.user_id}/recharge`,\r\n      transaction\r\n    );\r\n  }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid, TextField, Paper, Typography, FormControl } from '@material-ui/core';\r\nimport { Table, Button, Collapse, Loader } from 'xsolla-uikit';\r\nimport moment from 'moment';\r\n\r\nimport { Service } from '../../Service';\r\nconst service = new Service();\r\n\r\nconst columns = [\r\n  { id: 'date', name: 'дата', fieldGetter: 'date' },\r\n  { id: 'transaction_type', name: 'тип транзакции', fieldGetter: 'transaction_type' },\r\n  { id: 'amount', name: 'сумма операции', fieldGetter: 'amount' },\r\n  { id: 'user_balance', name: 'баланс', fieldGetter: 'user_balance' },\r\n  { id: 'currency', name: 'валюта', fieldGetter: 'currency' },\r\n  { id: 'comment', name: 'комментарий', fieldGetter: 'comment' },\r\n  { id: 'status', name: 'статус', fieldGetter: 'status' },\r\n];\r\n\r\nconst UserCard = (props) => {\r\n  let { id } = useParams();\r\n  const [values, setValues] = useState({\r\n    user_id: '',\r\n    user_name: '',\r\n    user_custom: '',\r\n    email: '',\r\n    register_date: '',\r\n    balance: '',\r\n    wallet_amount: '',\r\n    wallet_currency: '',\r\n    enabled: true,\r\n  });\r\n\r\n  const [transactionInfo, setTransactionInfo] = useState({\r\n    user_id: id,\r\n    amount: '',\r\n    comment: '',\r\n  });\r\n\r\n  const [errorFields, setErrorFields] = useState({\r\n    user_id: false,\r\n    user_name: false,\r\n    user_custom: false,\r\n    email: false,\r\n  });\r\n\r\n  const [loadSave, setLoadSave] = useState(false);\r\n  const [loadingPage, setloadingPage] = useState(true);\r\n  const [userNotFound, setUserNotFound] = useState(true);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [addTransactionLoad, setAddTransactionLoad] = useState(false);\r\n  const [errorText, setErrorText] = useState('');\r\n\r\n  useEffect(() => {\r\n    const getUserInfo = service.getUserInfo(id).then((user) => {\r\n      setValues(user.data);\r\n      return user;\r\n    });\r\n    const getTransactions = service.getTransactions(id).then(({ data }) => {\r\n      setTransactions(data);\r\n      return data;\r\n    });\r\n    Promise.all([getUserInfo, getTransactions]).then((values) => {\r\n      setUserNotFound(values[0].data.http_status_code === 404);\r\n      setloadingPage(false);\r\n    });\r\n  }, []);\r\n\r\n  const handlerOnChange = (inputID) => (event) => {\r\n    setValues({ ...values, [inputID]: event.target.value });\r\n    setErrorFields({ ...errorFields, [inputID]: false });\r\n  };\r\n\r\n  const handlerSubmitClick = (event) => {\r\n    setErrorText('');\r\n    setLoadSave(true);\r\n    service\r\n      .updateUser(values)\r\n      .then((answer) => {\r\n        setLoadSave(false);\r\n        if (answer.statusText === 'OK' && answer.status === 200) {\r\n          let error = '';\r\n          if (\r\n            !!answer.data &&\r\n            !!answer.data.extended_message &&\r\n            !!answer.data.extended_message.global_errors &&\r\n            answer.data.extended_message.global_errors.length > 0\r\n          )\r\n            error = answer.data.extended_message.global_errors.reduce(\r\n              (str, current) => str + ' ' + current,\r\n              0\r\n            );\r\n\r\n          if (\r\n            !!answer.data &&\r\n            !!answer.data.extended_message &&\r\n            !!answer.data.extended_message.property_errors\r\n          )\r\n            error +=\r\n              'Неверно заполнено поле:' +   \r\n              Object.keys(answer.data.extended_message.property_errors).reduce((str, current) => {\r\n                setErrorFields({ ...errorFields, [current]: true });\r\n                return str + ' ' + current + '\\n';\r\n              }, '');\r\n\r\n          if (error === '') console.log('добавлен');\r\n          else {\r\n            setErrorText(error);\r\n            console.log('ошибка', error);\r\n          }\r\n        } else {\r\n          console.log('ошибка', answer);\r\n        }\r\n      })\r\n      .catch((data) => {\r\n        setLoadSave(false);\r\n        console.log('произошла ошибка', data);\r\n      });\r\n  };\r\n\r\n  const handlerOnChangeTransaction = (inputID) => (event) => {\r\n    setTransactionInfo({ ...transactionInfo, [inputID]: event.target.value });\r\n  };\r\n\r\n  const handlerAddTransation = (event) => {\r\n    event.preventDefault();\r\n    setAddTransactionLoad(true);\r\n    service\r\n      .addTransaction(transactionInfo)\r\n      .then((answer) => {\r\n        setAddTransactionLoad(false);\r\n        if (\r\n          !!answer.data &&\r\n          !answer.data.message &&\r\n          answer.statusText === 'OK' &&\r\n          answer.status === 200\r\n        ) {\r\n          console.log('добавлен');\r\n          service.getTransactions(id).then(({ data }) => {\r\n            setTransactions(data);\r\n          });\r\n        } else {\r\n          console.log('ошибка', answer);\r\n        }\r\n      })\r\n      .catch((data) => {\r\n        setAddTransactionLoad(false);\r\n        console.log('произошла ошибка', data);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      {loadingPage && <Loader color=\"blue\" fullscreen={true} centered={true} />}\r\n      {!loadingPage && userNotFound && <div>Пользователя с таким id не существует</div>}\r\n      {!loadingPage && !userNotFound && (\r\n        <>\r\n          <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n            <Typography component=\"p\" align=\"left\" style={{ marginBottom: '20px' }}>\r\n              Информация о пользователе\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    id=\"user_id\"\r\n                    label=\"ID\"\r\n                    variant=\"outlined\"\r\n                    error={errorFields.user_id}\r\n                    onChange={handlerOnChange('user_id')}\r\n                    value={values.user_id}\r\n                    disabled\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    id=\"user_name\"\r\n                    label=\"Имя пользователя\"\r\n                    variant=\"outlined\"\r\n                    error={errorFields.user_name}\r\n                    onChange={handlerOnChange('user_name')}\r\n                    value={values.user_name}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    id=\"user_custom\"\r\n                    label=\"Полное имя\"\r\n                    variant=\"outlined\"\r\n                    error={errorFields.user_custom}\r\n                    onChange={handlerOnChange('user_custom')}\r\n                    value={values.user_custom}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    id=\"email\"\r\n                    label=\"E-mail\"\r\n                    variant=\"outlined\"\r\n                    error={errorFields.email}\r\n                    onChange={handlerOnChange('email')}\r\n                    value={values.email}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    id=\"register_date\"\r\n                    label=\"Дата регистрации\"\r\n                    variant=\"outlined\"\r\n                    value={moment(values.register_date).format('DD.MM.YYYY')}\r\n                    disabled\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    id=\"balance\"\r\n                    label=\"Баланс\"\r\n                    variant=\"outlined\"\r\n                    value={values.balance}\r\n                    disabled\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    id=\"wallet_amount\"\r\n                    label=\"Кошелек\"\r\n                    variant=\"outlined\"\r\n                    value={values.wallet_amount}\r\n                    disabled\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <TextField\r\n                    id=\"wallet_currency\"\r\n                    label=\"Валюта\"\r\n                    variant=\"outlined\"\r\n                    value={values.wallet_currency}\r\n                    disabled\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={10}>\r\n                <FormControl fullWidth>\r\n                  <Typography component=\"p\" align=\"left\" style={{ color: '#ff0000' }}>\r\n                    {errorText}\r\n                  </Typography>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} align=\"right\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  appearance=\"secondary\"\r\n                  onClick={handlerSubmitClick}\r\n                  fetching={loadSave}\r\n                >\r\n                  Изменить\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n          <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n            <Collapse\r\n              isOpened={false}\r\n              staticElements={1}\r\n              collapsedLabel={() => `Ввести данные`}\r\n              expandedLabel={() => 'Спрятать'}\r\n            >\r\n              <Typography component=\"p\" align=\"left\" style={{ marginBottom: '20px' }}>\r\n                Добавить операцию\r\n              </Typography>\r\n              <form onSubmit={handlerAddTransation}>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} md={5}>\r\n                  <FormControl fullWidth>\r\n                    <TextField\r\n                      id=\"amount\"\r\n                      label=\"Сумма\"\r\n                      variant=\"outlined\"\r\n                      onChange={handlerOnChangeTransaction('amount')}\r\n                      value={transactionInfo.amount}\r\n                      type=\"number\"\r\n                      required\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} md={5}>\r\n                  <FormControl fullWidth>\r\n                    <TextField\r\n                      id=\"comment\"\r\n                      label=\"Комментарий\"\r\n                      variant=\"outlined\"\r\n                      onChange={handlerOnChangeTransaction('comment')}\r\n                      value={transactionInfo.comment}\r\n                      required\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} md={2} align=\"right\">\r\n                  <Button\r\n                    type=\"submit\"\r\n                    appearance=\"secondary\"\r\n                    fetching={addTransactionLoad}\r\n                    style={{ height: '100%' }}\r\n                  >\r\n                    Добавить\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n              </form>\r\n            </Collapse>\r\n          </Paper>\r\n          <Paper style={{ marginBottom: '20px' }}>\r\n            <Typography component=\"p\" align=\"left\" style={{ padding: '20px' }}>\r\n              Все операции пользователя\r\n            </Typography>\r\n            <Table\r\n              columns={columns}\r\n              rows={transactions}\r\n              compact={true}\r\n              className=\"table-wrapper\"\r\n              tableClassName=\"user-table\"\r\n              renderEmptyMessage={() => <div>Нет данных</div>}\r\n              renderRow={(data) => {\r\n                data.row['date'] = moment(data.row['date']).format('DD.MM.YYYY');\r\n                return (\r\n                  <tr className={data.className} key={data.row.operation_id}>\r\n                    {data.columns.map((column, index) => (\r\n                      <data.CellComponent\r\n                        key={index}\r\n                        column={column}\r\n                        row={data.row}\r\n                        rowIndex={data.rowIndex}\r\n                        columnIndex={index}\r\n                      />\r\n                    ))}\r\n                  </tr>\r\n                );\r\n              }}\r\n            />\r\n          </Paper>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserCard;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Grid, TextField, FormControl, Paper, Typography } from '@material-ui/core';\r\nimport { Table, Button, Collapse } from 'xsolla-uikit';\r\nimport Pagination from 'xsolla-uikit/lib/pagination'; //отсутствует в общем списке\r\n\r\nimport './userlist.css';\r\nimport { Service } from '../../Service';\r\nconst service = new Service();\r\n\r\nconst columns = [\r\n  {\r\n    id: 'user_id',\r\n    name: 'ID',\r\n    fieldGetter: 'user_id',\r\n  },\r\n  {\r\n    id: 'user_name',\r\n    name: 'Имя пользователя',\r\n    fieldGetter: 'user_name',\r\n  },\r\n  {\r\n    id: 'user_custom',\r\n    name: 'Полное имя',\r\n    fieldGetter: 'user_custom',\r\n  },\r\n  {\r\n    id: 'email',\r\n    name: 'E-mail',\r\n    fieldGetter: 'email',\r\n  },\r\n];\r\n\r\nconst UserList = (props) => {\r\n  const history = useHistory();\r\n  const [users, setUsers] = useState([]);\r\n  const [recordsTotal, setRecordsTotal] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(10);\r\n  const [userParams, setUserParams] = useState({});\r\n  const [loadAdd, setLoadAdd] = useState(false);\r\n  const [errorText, setErrorText] = useState('');\r\n\r\n  const [errorFields, setErrorFields] = useState({\r\n    user_id: false,\r\n    user_name: false,\r\n    user_custom: false,\r\n    email: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    service.getUsers(currentPage, perPage).then((items) => {\r\n      console.log('getUsers', items.data.data);\r\n      setUsers(items.data.data);\r\n      setRecordsTotal(items.data.recordsTotal);\r\n      return () => {};\r\n    });\r\n  }, [currentPage]);\r\n\r\n  const handlerOnChange = (inputID) => (event) => {\r\n    setUserParams({ ...userParams, [inputID]: event.target.value });\r\n    setErrorFields({ ...errorFields, [inputID]: false });\r\n  };\r\n\r\n  const handlerSubmitClick = (event) => {\r\n    event.preventDefault();\r\n    setErrorText('');\r\n    setLoadAdd(true);\r\n    service\r\n      .addUser(userParams)\r\n      .then((answer) => {\r\n        if (answer.statusText === 'OK' && answer.status === 200) {\r\n          let error = '';\r\n          if (\r\n            !!answer.data &&\r\n            !!answer.data.extended_message &&\r\n            !!answer.data.extended_message.global_errors &&\r\n            answer.data.extended_message.global_errors.length > 0\r\n          )\r\n            error = answer.data.extended_message.global_errors.reduce(\r\n              (str, current) => str + ' ' + current + '\\n',\r\n              0\r\n            );\r\n\r\n          if (\r\n            !!answer.data &&\r\n            !!answer.data.extended_message &&\r\n            !!answer.data.extended_message.property_errors\r\n          )\r\n            error +=\r\n              'Ошибка:' +\r\n              Object.keys(answer.data.extended_message.property_errors).reduce((str, current) => {\r\n                setErrorFields({ ...errorFields, [current]: true });\r\n                console.log(current);\r\n                return str + ' ' + current + '.' +  answer.data.extended_message.property_errors[current] + '\\n';\r\n              }, '');\r\n\r\n          if (!!answer.data && !!answer.data.message) error += answer.data.message;\r\n\r\n          if (error === '') {\r\n            setCurrentPage(Math.floor((recordsTotal + 1) / perPage) + 1);\r\n            console.log('добавлен');\r\n          } else {\r\n            setErrorText(error);\r\n            console.log('ошибка', error);\r\n          }\r\n        } else {\r\n          console.log('ошибка', answer);\r\n        }\r\n        setLoadAdd(false);\r\n      })\r\n      .catch(() => {\r\n        setLoadAdd(false);\r\n      });\r\n  };\r\n\r\n  const handlerTableClick = (param) => {\r\n    console.log(param);\r\n    history.push(`/usercard/${param}`);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <Paper style={{ padding: '20px', marginBottom: '20px' }}>\r\n        <Collapse\r\n          isOpened={false}\r\n          staticElements={1}\r\n          collapsedLabel={() => 'Ввести данные'}\r\n          expandedLabel={() => 'Спрятать'}\r\n        >\r\n          <Typography component=\"p\" align=\"left\" style={{ marginBottom: '20px' }}>\r\n            Добавление пользователя\r\n          </Typography>\r\n          <form onSubmit={handlerSubmitClick}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} md={2}>\r\n              <FormControl fullWidth>\r\n                <TextField\r\n                  id=\"user_id\"\r\n                  label=\"ID\"\r\n                  variant=\"outlined\"\r\n                  error={errorFields.user_id}\r\n                  onChange={handlerOnChange('user_id')}\r\n                  required\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n              <FormControl fullWidth>\r\n                <TextField\r\n                  id=\"user_name\"\r\n                  label=\"Имя пользователя\"\r\n                  variant=\"outlined\"\r\n                  error={errorFields.user_name}\r\n                  onChange={handlerOnChange('user_name')}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n              <FormControl fullWidth>\r\n                <TextField\r\n                  id=\"user_custom\"\r\n                  label=\"Полное имя\"\r\n                  variant=\"outlined\"\r\n                  error={errorFields.user_custom}\r\n                  onChange={handlerOnChange('user_custom')}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={2}>\r\n              <FormControl fullWidth>\r\n                <TextField\r\n                  id=\"email\"\r\n                  label=\"E-mail\"\r\n                  variant=\"outlined\"\r\n                  error={errorFields.email}\r\n                  onChange={handlerOnChange('email')}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            {errorText && (\r\n              <Grid item xs={12} md={10}>\r\n                <FormControl fullWidth>\r\n                  <Typography component=\"p\" align=\"left\" style={{ color: '#ff0000' }}>\r\n                    {errorText}\r\n                  </Typography>\r\n                </FormControl>\r\n              </Grid>\r\n            )}\r\n            <Grid item xs={12} md={2} align=\"right\">\r\n              <Button\r\n                type=\"submit\"\r\n                appearance=\"secondary\"\r\n                style={{ height: '100%' }}\r\n                fetching={loadAdd}\r\n              >\r\n                Добавить\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          </form>\r\n        </Collapse>\r\n      </Paper>\r\n\r\n      <Paper>\r\n        <Typography component=\"p\" align=\"left\" style={{ padding: '20px' }}>\r\n          Все пользователи\r\n        </Typography>\r\n        <Grid container>\r\n          <Grid item xs={12} style={{ marginBottom: '10px', paddingLeft: '20px' }}>\r\n            <Pagination\r\n              current={currentPage}\r\n              total={recordsTotal}\r\n              perPage={perPage}\r\n              onChangePage={setCurrentPage}\r\n              className=\"pagin\"\r\n              size=\"sm\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Table\r\n          columns={columns}\r\n          rows={users}\r\n          compact={true}\r\n          className=\"table-wrapper\"\r\n          tableClassName=\"user-table\"\r\n          renderEmptyMessage={() => <div>Нет данных</div>}\r\n          renderRow={(data) => (\r\n            <tr\r\n              title=\"Двойнок клик: редактирование пользователя и просмотр операций\"\r\n              className={data.className}\r\n              key={data.row.user_id}\r\n              onDoubleClick={handlerTableClick.bind(null, data.row.user_id)}\r\n            >\r\n              {data.columns.map((column, index) => (\r\n                <data.CellComponent\r\n                  key={index}\r\n                  column={column}\r\n                  row={data.row}\r\n                  rowIndex={data.rowIndex}\r\n                  columnIndex={index}\r\n                />\r\n              ))}\r\n            </tr>\r\n          )}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport UserCard from './pages/UserCard';\r\nimport UserList from './pages/UserList';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n      <Switch>\r\n          <Route path=\"/usercard/:id\">\r\n            <UserCard />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <UserList/>\r\n          </Route>\r\n        </Switch>\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}